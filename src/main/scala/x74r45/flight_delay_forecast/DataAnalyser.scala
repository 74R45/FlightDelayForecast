package x74r45.flight_delay_forecast

import com.cibo.evilplot.colors.RGB
import com.cibo.evilplot.numeric.Point
import com.cibo.evilplot.plot._
import com.cibo.evilplot.plot.aesthetics.DefaultTheme.defaultTheme
import com.cibo.evilplot.plot.renderers.PointRenderer

import java.awt.image.BufferedImage
import java.io.File
import javax.imageio.ImageIO
import scala.annotation.tailrec

object DataAnalyser {

  def main(args: Array[String]): Unit = {
//    val delaysPerAirline = Array(
//      ("UA", Seq(34491.0, 8157.0, 3478.0)),
//      ("NK", Seq(11766.0, 2479.0, 764.0)),
//      ("AA", Seq(56329.0, 15484.0, 3541.0)),
//      ("EV", Seq(9083.0, 1838.0, 1281.0)),
//      ("B6", Seq(15074.0, 5503.0, 2818.0)),
//      ("PT", Seq(6960.0, 1311.0, 390.0)),
//      ("DL", Seq(57845.0, 12614.0, 2944.0)),
//      ("OO", Seq(45575.0, 10260.0, 6132.0)),
//      ("F9", Seq(6282.0, 2352.0, 856.0)),
//      ("YV", Seq(13819.0, 2884.0, 1126.0)),
//      ("MQ", Seq(17249.0, 4837.0, 1627.0)),
//      ("C5", Seq(2125.0, 899.0, 834.0)),
//      ("OH", Seq(17030.0, 4260.0, 1080.0)),
//      ("EM", Seq(595.0, 111.0, 14.0)),
//      ("HA", Seq(5516.0, 1152.0, 117.0)),
//      ("G4", Seq(4526.0, 1723.0, 445.0)),
//      ("ZW", Seq(5743.0, 1146.0, 732.0)),
//      ("CP", Seq(6101.0, 1328.0, 653.0)),
//      ("YX", Seq(18468.0, 4059.0, 2064.0)),
//      ("AS", Seq(15999.0, 3303.0, 902.0)),
//      ("KS", Seq(71.0, 67.0, 30.0)),
//      ("QX", Seq(7543.0, 1977.0, 273.0)),
//      ("G7", Seq(4955.0, 1087.0, 782.0)),
//      ("WN", Seq(74890.0, 28635.0, 3710.0)),
//      ("AX", Seq(3957.0, 1138.0, 625.0)),
//      ("9E", Seq(15149.0, 2958.0, 1728.0)))
//    plotDelaysPerAirline(delaysPerAirline)

//    val distr = Seq(
//      ("WN",0.173618025771919),
//      ("AA",0.12200133085296018),
//      ("DL",0.11884257887570449),
//      ("OO",0.10032720849543997),
//      ("UA",0.07467995576775806),
//      ("YX",0.03981387487067898),
//      ("MQ",0.038392355528787385),
//      ("B6",0.037877500004047604),
//      ("OH",0.036217981410153664),
//      ("AS",0.0327111352888129),
//      ("9E",0.03211370859501108),
//      ("YV",0.02886590927857084),
//      ("NK",0.02430020934219921),
//      ("EV",0.01975555695872575),
//      ("QX",0.015855283502442325),
//      ("F9",0.01536471361566197),
//      ("PT",0.014022527357771162),
//      ("CP",0.013085101732537413),
//      ("ZW",0.012338723125917795),
//      ("G7",0.01104834622900709),
//      ("HA",0.010985203570312588),
//      ("G4",0.010837870700025419),
//      ("AX",0.009260923275193516),
//      ("C5",0.006246266083163738),
//      ("EM",0.0011657106220523308),
//      ("KS",2.7199914514554384E-4))
//    plotAirlinesDistr(distr)
    val delays = Seq((0,1,-6.0), (0,1,-10.0), (0,3,14.0), (0,3,46.0), (0,3,0.0), (0,3,-2.0), (0,3,-11.0), (0,3,-7.0), (0,4,-6.0), (0,4,5.0), (0,4,-8.0), (0,4,0.0), (0,4,32.0), (0,4,19.0), (0,4,17.0), (0,4,12.0), (0,4,-2.0), (0,4,0.0), (0,4,-6.0), (0,4,-4.0), (0,4,21.0), (0,4,1.0), (0,4,4.0), (0,4,22.0), (0,4,-6.0), (0,4,-4.0), (0,4,-2.0), (0,4,-6.0), (0,4,21.0), (0,4,44.0), (0,4,-1.0), (0,4,-5.0), (0,4,-8.0), (0,4,-7.0), (0,4,-8.0), (0,4,-10.0), (0,4,-3.0), (0,4,39.0), (0,4,-2.0), (0,4,8.0), (0,4,45.0), (0,4,14.0), (0,4,-4.0), (0,4,12.0), (0,4,-8.0), (0,4,0.0), (0,4,-9.0), (0,4,-10.0), (0,4,25.0), (0,4,22.0), (0,4,21.0), (0,4,-5.0), (0,4,159.0), (0,4,-8.0), (0,4,-6.0), (0,4,1.0), (0,4,13.0), (0,4,5.0), (0,4,-8.0), (0,4,-5.0), (0,4,49.0), (0,5,-2.0), (0,5,-4.0), (0,5,2.0), (0,5,1.0), (0,5,-1.0), (0,5,-7.0), (0,5,20.0), (0,5,18.0), (0,5,-3.0), (0,5,-5.0), (0,5,-1.0), (0,5,-1.0), (0,5,-4.0), (0,5,-3.0), (0,5,-3.0), (0,5,-4.0), (0,5,-1.0), (0,5,8.0), (0,5,1.0), (0,5,22.0), (0,5,-5.0), (0,5,-2.0), (0,5,9.0), (0,5,12.0), (0,5,-1.0), (0,5,1.0), (0,5,2.0), (0,5,-9.0), (0,5,-3.0), (0,5,-4.0), (0,5,-10.0), (0,5,-12.0), (0,5,-2.0), (0,5,29.0), (0,5,21.0), (0,5,-1.0), (0,5,-8.0), (0,5,-4.0), (0,5,23.0), (0,5,-7.0), (0,5,24.0), (0,5,25.0), (0,5,-2.0), (0,5,1.0), (0,5,16.0), (0,5,-3.0), (0,5,-3.0), (0,5,-4.0), (0,5,8.0), (0,5,-5.0), (0,5,78.0), (0,5,13.0), (0,5,14.0), (0,5,-1.0), (0,5,-2.0), (0,5,-8.0), (0,5,12.0), (0,5,-1.0), (0,5,-7.0), (0,5,22.0), (0,5,24.0), (0,5,11.0), (0,5,-9.0), (0,5,-4.0), (0,5,-4.0), (0,5,-7.0), (0,5,2.0), (0,5,12.0), (0,5,1.0), (0,5,-1.0), (0,5,16.0), (0,6,-5.0), (0,8,27.0), (0,9,6.0), (0,9,42.0), (0,9,4.0), (0,9,0.0), (0,9,-9.0), (0,9,-9.0), (0,9,39.0), (0,9,-2.0), (0,9,-8.0), (0,9,-7.0), (0,9,-1.0), (0,9,-3.0), (0,9,-5.0), (0,9,-4.0), (0,9,-4.0), (0,9,3.0), (0,9,-2.0), (0,9,-2.0), (0,9,-5.0), (0,9,-7.0), (0,9,27.0), (0,9,-6.0), (0,9,1.0), (0,9,72.0), (0,9,-4.0), (0,9,-9.0), (0,9,3.0), (0,9,-7.0), (0,9,225.0), (0,10,0.0), (0,10,-10.0), (0,10,3.0), (0,10,-9.0), (0,10,-15.0), (0,10,-12.0), (0,10,-4.0), (0,10,-2.0), (0,11,-6.0), (0,11,-8.0), (0,11,-3.0), (0,11,-1.0), (0,11,-5.0), (0,12,-4.0), (0,12,15.0), (0,14,1.0), (0,14,5.0), (0,14,-5.0), (0,14,-6.0), (0,14,-4.0), (0,14,9.0), (0,14,-1.0), (0,14,-3.0), (0,14,64.0), (0,14,-1.0), (0,14,-4.0), (0,14,21.0), (0,15,-5.0), (0,15,10.0), (0,15,-1.0), (0,15,-11.0), (0,15,0.0), (0,15,-6.0), (0,15,4.0), (0,15,-7.0), (0,15,-1.0), (0,15,10.0))
    val means = Seq((0,0,6.8343558282208585), (0,10,4.470588235294118), (0,20,9.060975609756097), (0,30,3.4690265486725664), (0,40,4.182879377431907), (0,50,5.425149700598802), (1,0,3.8773006134969323), (1,10,8.025974025974026), (1,20,13.868686868686869), (1,30,2.75), (1,40,5.119047619047619), (1,50,17.048387096774192), (2,0,15.057142857142857), (2,20,-5.096774193548387), (2,30,36.666666666666664), (2,40,-3.6666666666666665), (2,50,7.346153846153846), (3,0,15.226666666666667), (3,10,6.844444444444444), (3,30,38.84615384615385), (3,40,16.806451612903224), (3,50,11.954545454545455), (4,0,29.8), (4,10,-2.0), (4,20,8.547169811320755), (4,30,6.076923076923077), (4,40,-2.3636363636363638), (4,50,26.185185185185187), (5,0,5.240055504162812), (5,10,3.3083657587548636), (5,20,3.4558327714093053), (5,30,3.4941026458399747), (5,40,6.734071274298056), (5,50,3.413057961359094), (6,0,2.401913875598086), (6,10,2.5510171391958996), (6,20,2.783313082219522), (6,30,4.056181610321738), (6,40,3.4878425318409882), (6,50,2.1055191768007484), (7,0,3.8139748186442093), (7,10,4.410363025747641), (7,20,3.0760888577925485), (7,30,3.318609938291653), (7,40,3.6108374384236455), (7,50,4.294197292069632), (8,0,3.8204345273047564), (8,10,4.271700356718193), (8,20,5.808811575353601), (8,30,5.496659242761693), (8,40,5.985648951269516), (8,50,5.247610121836926), (9,0,5.873734451836853), (9,10,6.436732966567922), (9,20,5.822014585232452), (9,30,6.523554762966265), (9,40,6.486478410279396), (9,50,6.312002197198572), (10,0,8.605266489429042), (10,10,8.433274956217163), (10,20,8.018111482328116), (10,30,7.283398737416823), (10,40,8.19412775261596), (10,50,8.221709006928407), (11,0,9.199917446340121), (11,10,7.822844509948416), (11,20,9.191678808483083), (11,30,9.491990483743061), (11,40,8.703973751367116), (11,50,10.171010715320012), (12,0,9.890620689655172), (12,10,10.534341322181117), (12,20,9.191205862758162), (12,30,10.155778894472363), (12,40,11.265433939755443), (12,50,10.782066408225182), (13,0,11.88842304571274), (13,10,10.669577127204246), (13,20,12.214723926380367), (13,30,12.657215189873417), (13,40,9.241267262388302), (13,50,10.880202678248281), (14,0,14.000411861614497), (14,10,12.056574326960593), (14,20,11.126086956521739), (14,30,11.543089186343812), (14,40,11.725781961737018), (14,50,12.87434554973822), (15,0,11.468009140245645), (15,10,11.772274282314443), (15,20,11.988987854251013), (15,30,13.397246228211513), (15,40,11.134173941157453), (15,50,12.589350336033087), (16,0,13.897558640497845), (16,10,11.082385796927987), (16,20,12.086448213403589), (16,30,11.954981653965566), (16,40,12.485788533376644), (16,50,14.121021220159152), (17,0,14.916404001644512), (17,10,14.346882535308302), (17,20,14.013660179640718), (17,30,14.353561210661045), (17,40,12.739749281796813), (17,50,15.25994798439532), (18,0,16.092022063769676), (18,10,15.186984739519383), (18,20,15.703065481588972), (18,30,13.840304182509506), (18,40,14.361798158512366), (18,50,16.13240358126722), (19,0,17.029911504424778), (19,10,13.436910642119443), (19,20,14.803264028616141), (19,30,15.8809963099631), (19,40,14.969405456552595), (19,50,14.92388306674021), (20,0,13.810956175298804), (20,10,14.692664418212479), (20,20,15.198936641559593), (20,30,14.544815112540192), (20,40,13.756016202049082), (20,50,13.379978757302178), (21,0,12.124847374847375), (21,10,12.186949924127466), (21,20,14.5912739965096), (21,30,12.126185685541822), (21,40,13.708104814137721), (21,50,16.88597210828548), (22,0,11.139466958744068), (22,10,12.378571428571428), (22,20,9.242953020134228), (22,30,10.577298616761595), (22,40,9.658823529411764), (22,50,10.148445336008024), (23,0,6.773547094188377), (23,10,14.094186046511627), (23,20,5.796561604584527), (23,30,3.7592891760904683), (23,40,7.781774580335731), (23,50,10.619786614936954))
    plotTimeOfDayDelays(delays, means)
  }

  def plotAirlinesDistr(data: Seq[(String, Double)]): Unit = {
    val plot = PieChart(data).frame().rightLegend().render()
    outputImage(plot.asBufferedImage, "airlinesDistribution")
  }

  def plotAirlineMeanDelays(data: Seq[(String, Double)]): Unit = {
    val plot = BarChart(data.map(_._2), spacing = Some(3))
      .title("Airline Mean Delays")
      .xAxis(data.map(_._1))
      .yAxis()
      .ybounds(lower = -3)
      .leftLabel("delay, min")
      .bottomLabel("airline ID")
      .frame()
      .render()
    outputImage(plot.asBufferedImage, "airlineMeanDelays")
  }

  def plotDelaysPerAirline(data: Seq[(String, Seq[Double])]): Unit = {
    val plot = BarChart
      .stacked(data.map(_._2), labels = Seq("t < 5 min", "5 < t < 60 min", "t > 60 min"), spacing = Some(3))
      .title("Delays per Airline")
      .xAxis(data.map(_._1))
      .yAxis()
      .leftLabel("# of flights")
      .bottomLabel("airline ID")
      .frame()
      .rightLegend()
      .render()
    outputImage(plot.asBufferedImage, "delaysPerAirline")
  }

  def plotAirportsPerAirline(data: Seq[(String, Double)]): Unit = {
    val plot = BarChart(data.map(_._2), spacing = Some(3))
      .title("Airports per Airline")
      .xAxis(data.map(_._1))
      .yAxis()
      .ybounds(lower = -3)
      .leftLabel("# of airports")
      .bottomLabel("airline ID")
      .frame()
      .render()
    outputImage(plot.asBufferedImage, "airportsPerAirline")
  }

  def plotAirportAirlineMeanDelays(data: Seq[(String, String, Double)]): Unit = {
    def assignDoubles(xs: Seq[String]): Map[String, Double] =
      xs.distinct.zipWithIndex.map{case (s, i) => (s, i.toDouble)}.toMap

    val alMap = assignDoubles(data.map(_._1))
    val apMap = assignDoubles(data.map(_._2))

    def normalizeDelay(d: Double): Double = {
      if (d < 0d) 0d
      else if (d > 20d) 20d
      else d
    }

    val newData = data.map {
      case (airline, airport, delay) =>
        Point(alMap(airline), apMap(airport)) -> normalizeDelay(delay)
    }.toMap.withDefault(p => {println(s"Default called: $p"); 0d})

//    // I encountered a bug in the library, which leads to function depth() receiving Points with
//    // arbitrarily scaled x and y. I found that in my particular example the scale factors were
//    // close to 28.76 and 1.29, this was my attempt to fix it and still generate a plot image.
//    val depth: Point => Double =
//      p => newData(Point(math.floor(p.x / 28.76), math.floor(p.y / 1.29)))

    val plot = ScatterPlot(
      newData.keys.toSeq,
      pointRenderer = Some(PointRenderer.depthColor(newData, 0d, 20d)))
      .title("Delays per Airline & Airport")
      .standard()
      .leftLabel("airport")
      .bottomLabel("airline")
      .rightLegend()
      .render()
    outputImage(plot.asBufferedImage, "airportAirlineMeanDelays")
  }

  def plotAirportMeanDelays(data: Seq[(String, Double)]): Unit = {
    val plot = BarChart(data.map(_._2))
      .title("Airport Mean Delays")
      .xAxis(data.map(_._1))
      .yAxis()
      .ybounds(lower = -3)
      .leftLabel("delay, min")
      .bottomLabel("airport ID")
      .frame()
      .render()
    outputImage(plot.asBufferedImage, "airportMeanDelays")
  }

  def plotTimeOfDayDelays(delays: Seq[(Int, Int, Double)], means: Seq[(Int, Int, Double)]): Unit = {
    val delaysData = delays.map(s => Point((s._1 * 60 + s._2).toDouble, s._3))
    val meansData = means.map(s => ((s._1 * 60 + s._2).toDouble, s._3))

    val xLabels = (0 to 24 by 2).map(h => f"$h%02d:00")
    val xLabelsPos = (0 to 24 by 2).map(_ * 60d)
    val yLabels = -10 to 150 by 10 map (_.toString)
    val yLabelsPos = -10 to 150 by 10 map (_.toDouble)

    def meansFunc(x: Double): Double = {
      @tailrec
      def interpolate(prev: (Double, Double), vals: Seq[(Double, Double)]): Double = {
        if (vals.isEmpty) prev._2
        else if (x < vals.head._1) {
          // Interpolation between two closest points
          val next = vals.head
          prev._2 + (x - prev._1) / (next._1 - prev._1) * (next._2 - prev._2)
        } else interpolate(vals.head, vals.tail)
      }

      if (x < meansData.head._1) meansData.head._2
      else interpolate(meansData.head, meansData.tail)
    }

    val plot = ScatterPlot(delaysData, pointRenderer = Some(
      PointRenderer.default[Point](color = Some(RGB(65, 105, 225)), pointSize = Some(1))))
      .title("Delays per time of day")
      .xAxis(xLabels, xLabelsPos)
      .yAxis(yLabels, yLabelsPos)
      .yGrid(lineCount = Some(10))
      .xGrid(lineCount = Some(8))
      .xbounds(0, 24 * 60)
      .ybounds(-10, 150)
      .function(meansFunc, RGB(220,20,60))
      .leftLabel("delay, min")
      .bottomLabel("time of day")
      .render()
    outputImage(plot.asBufferedImage, "timeOfDayDelays")
  }


  private def outputImage(img: BufferedImage, name: String): Unit = {
    ImageIO.write(img, "png", new File(s"target/plots/$name.png"))
  }
}
